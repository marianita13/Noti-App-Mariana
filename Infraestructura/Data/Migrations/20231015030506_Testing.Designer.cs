// <auto-generated />
using System;
using Infraestructura.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructura.Data.Migrations
{
    [DbContext(typeof(NotiAppContext))]
    [Migration("20231015030506_Testing")]
    partial class Testing
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Auditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DesAccion")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Auditorias", (string)null);
                });

            modelBuilder.Entity("Core.Entities.BlockChain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("HashGenerado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdAuditoriaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdHiloRespuestaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdNotificacionFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAuditoriaFk");

                    b.HasIndex("IdHiloRespuestaFk");

                    b.HasIndex("IdNotificacionFk");

                    b.ToTable("BlockChain", (string)null);
                });

            modelBuilder.Entity("Core.Entities.EstadoNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EstadoNotificacion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Formatos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombreFormato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Formatos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.GenericosvsSubModulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<int>("IdPermisosFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRolFk")
                        .HasColumnType("int");

                    b.Property<int>("IdSubModulos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPermisosFk");

                    b.HasIndex("IdRolFk");

                    b.HasIndex("IdSubModulos");

                    b.ToTable("GenericosvsSubModulos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.HiloRespuestaNot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombreTipo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("HiloRespuestaNotificacion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MaestrosvsSubModulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<int>("IdMaestro")
                        .HasColumnType("int");

                    b.Property<int>("IdSubModulo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMaestro");

                    b.HasIndex("IdSubModulo");

                    b.ToTable("MaestrosvsSubModulos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ModuloNoficaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AsuntoNotificacion")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<int>("IdEstadoNotificacionFk")
                        .HasColumnType("int");

                    b.Property<int>("IdFormatoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdHiloRespuestaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdNotificacionFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRadicadoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRequerimiento")
                        .HasColumnType("int");

                    b.Property<string>("TextoNotificacion")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstadoNotificacionFk");

                    b.HasIndex("IdFormatoFk");

                    b.HasIndex("IdHiloRespuestaFk");

                    b.HasIndex("IdNotificacionFk");

                    b.HasIndex("IdRadicadoFk");

                    b.HasIndex("IdRequerimiento");

                    b.ToTable("ModuloNoficaciones", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ModulosMaestros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombreModulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ModulosMaestros", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PermisosGenericos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombrePermiso")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PermisosGenericos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Radicados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.ToTable("Radicados", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Entities.RolvsMaestro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<int>("IdMaestros")
                        .HasColumnType("int");

                    b.Property<int>("IdRolFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMaestros");

                    b.HasIndex("IdRolFk");

                    b.ToTable("RolVsMaestro", (string)null);
                });

            modelBuilder.Entity("Core.Entities.SubModulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombreSubmodulo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("SubModulos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoNotificaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombreTipo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoNotificaciones", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoRequerimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoRequerimiento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.BlockChain", b =>
                {
                    b.HasOne("Core.Entities.Auditoria", "Auditorias")
                        .WithMany("BlockChains")
                        .HasForeignKey("IdAuditoriaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.HiloRespuestaNot", "HiloRespuestaNots")
                        .WithMany("BlockChains")
                        .HasForeignKey("IdHiloRespuestaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoNotificaciones", "TipoNots")
                        .WithMany("BlockChains")
                        .HasForeignKey("IdNotificacionFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditorias");

                    b.Navigation("HiloRespuestaNots");

                    b.Navigation("TipoNots");
                });

            modelBuilder.Entity("Core.Entities.GenericosvsSubModulos", b =>
                {
                    b.HasOne("Core.Entities.PermisosGenericos", "permisosGenericos")
                        .WithMany("GenericosvsSubModulos")
                        .HasForeignKey("IdPermisosFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Rol", "Roles")
                        .WithMany("GenericosvsSubModulos")
                        .HasForeignKey("IdRolFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MaestrosvsSubModulos", "MaestrosvsSub")
                        .WithMany("GenericosvsSubModulos")
                        .HasForeignKey("IdSubModulos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaestrosvsSub");

                    b.Navigation("Roles");

                    b.Navigation("permisosGenericos");
                });

            modelBuilder.Entity("Core.Entities.MaestrosvsSubModulos", b =>
                {
                    b.HasOne("Core.Entities.ModulosMaestros", "Maestros")
                        .WithMany("MaestrosvsSubModulos")
                        .HasForeignKey("IdMaestro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.SubModulos", "subModulos")
                        .WithMany("MaestrosvsSubModulos")
                        .HasForeignKey("IdSubModulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maestros");

                    b.Navigation("subModulos");
                });

            modelBuilder.Entity("Core.Entities.ModuloNoficaciones", b =>
                {
                    b.HasOne("Core.Entities.EstadoNotificacion", "EstadoNot")
                        .WithMany("ModuloNoficaciones")
                        .HasForeignKey("IdEstadoNotificacionFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Formatos", "Formatos")
                        .WithMany("ModuloNoficaciones")
                        .HasForeignKey("IdFormatoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.HiloRespuestaNot", "HiloRespuestaNots")
                        .WithMany("ModuloNoficaciones")
                        .HasForeignKey("IdHiloRespuestaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoNotificaciones", "TipoNotificacion")
                        .WithMany("ModuloNoficaciones")
                        .HasForeignKey("IdNotificacionFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Radicados", "Radicado")
                        .WithMany("ModuloNoficaciones")
                        .HasForeignKey("IdRadicadoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoRequerimiento", "Requerimientos")
                        .WithMany("ModuloNoficaciones")
                        .HasForeignKey("IdRequerimiento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoNot");

                    b.Navigation("Formatos");

                    b.Navigation("HiloRespuestaNots");

                    b.Navigation("Radicado");

                    b.Navigation("Requerimientos");

                    b.Navigation("TipoNotificacion");
                });

            modelBuilder.Entity("Core.Entities.RolvsMaestro", b =>
                {
                    b.HasOne("Core.Entities.ModulosMaestros", "Maestros")
                        .WithMany("RolvsMaestros")
                        .HasForeignKey("IdMaestros")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Rol", "Roles")
                        .WithMany("RolvsMaestros")
                        .HasForeignKey("IdRolFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maestros");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Core.Entities.Auditoria", b =>
                {
                    b.Navigation("BlockChains");
                });

            modelBuilder.Entity("Core.Entities.EstadoNotificacion", b =>
                {
                    b.Navigation("ModuloNoficaciones");
                });

            modelBuilder.Entity("Core.Entities.Formatos", b =>
                {
                    b.Navigation("ModuloNoficaciones");
                });

            modelBuilder.Entity("Core.Entities.HiloRespuestaNot", b =>
                {
                    b.Navigation("BlockChains");

                    b.Navigation("ModuloNoficaciones");
                });

            modelBuilder.Entity("Core.Entities.MaestrosvsSubModulos", b =>
                {
                    b.Navigation("GenericosvsSubModulos");
                });

            modelBuilder.Entity("Core.Entities.ModulosMaestros", b =>
                {
                    b.Navigation("MaestrosvsSubModulos");

                    b.Navigation("RolvsMaestros");
                });

            modelBuilder.Entity("Core.Entities.PermisosGenericos", b =>
                {
                    b.Navigation("GenericosvsSubModulos");
                });

            modelBuilder.Entity("Core.Entities.Radicados", b =>
                {
                    b.Navigation("ModuloNoficaciones");
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Navigation("GenericosvsSubModulos");

                    b.Navigation("RolvsMaestros");
                });

            modelBuilder.Entity("Core.Entities.SubModulos", b =>
                {
                    b.Navigation("MaestrosvsSubModulos");
                });

            modelBuilder.Entity("Core.Entities.TipoNotificaciones", b =>
                {
                    b.Navigation("BlockChains");

                    b.Navigation("ModuloNoficaciones");
                });

            modelBuilder.Entity("Core.Entities.TipoRequerimiento", b =>
                {
                    b.Navigation("ModuloNoficaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
